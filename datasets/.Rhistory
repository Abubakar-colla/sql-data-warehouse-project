cat("\014")
rm(list = ls())
try(dev.off(dev.list()["RStudioGD"]), silent = TRUE)
try(p_unload(p_loaded(), character.only = TRUE), silent = TRUE)
options(scipen = 100)
setwd("C:/Users/EliteBook mt44/Desktop/sql/NEW_PROJECT_NOW/sql-data-warehouse-project/datasets/source_crm")
getwd()
df = read.csv("cust_info.csv")
View(df)
df = read.csv("prd_info.csv")
View(df)
df = read.csv("sales_details.csv")
View(df)
View(df)
df = read.csv("CUST_AZ12.csv")
View(df)
setwd("C:/Users/EliteBook mt44/Desktop/sql/NEW_PROJECT_NOW/sql-data-warehouse-project/datasets/source_erp")
getwd()
df = read.csv("CUST_AZ12.csv")
View(df)
df = read.csv("LOC_A101.csv")
View(df)
df = read.csv("PX_CAT_G1V2.csv")
View(df)
# Set the probability of a defective product
p_defective <- 0.1  # 10% probability of defect
# Simulate a single Bernoulli trial (one product test)
set.seed(123)  # For reproducibility
product_status <- rbinom(1, size = 1, prob = p_defective)
# Print result
if (product_status == 1) {
print("The product is defective.")
} else {
print("The product is NOT defective.")
}
set.seed(123)  # For reproducibility
product_status <- rbinom(1, size = 1, prob = p_defective)
product_status
# Simulate 100 product tests
n_tests <- 100
test_results <- rbinom(n_tests, size = 1, prob = p_defective)
# Count number of defective products
num_defective <- sum(test_results)
num_defective
# Print results
print(paste("Out of", n_tests, "products tested,", num_defective, "were defective."))
# Simulate 100 product tests
n_tests <- 10000
test_results <- rbinom(n_tests, size = 1, prob = p_defective)
# Count number of defective products
num_defective <- sum(test_results)
# Print results
print(paste("Out of", n_tests, "products tested,", num_defective, "were defective."))
test_results
df <- data.frame(
Status = factor(test_results, levels = c(0, 1), labels = c("Not Defective", "Defective"))
)
df
ggplot(df, aes(x = Status, fill = Status)) +
geom_bar() +
labs(title = "Product Defect Test Results", x = "Product Status", y = "Count") +
scale_fill_manual(values = c("Not Defective" = "blue", "Defective" = "red")) +
theme_minimal()
library(ggplot2)
# Plot the results using ggplot2
ggplot(df, aes(x = Status, fill = Status)) +
geom_bar() +
labs(title = "Product Defect Test Results", x = "Product Status", y = "Count") +
scale_fill_manual(values = c("Not Defective" = "blue", "Defective" = "red")) +
theme_minimal()
# Set probability of defect
p_defective <- 0.1  # 10% chance of defect
# Simulate 100 product tests
n_tests <- 100
set.seed(123)  # For reproducibility
test_results <- rbinom(n_tests, size = 1, prob = p_defective)
# Count actual defective products
actual_defective <- sum(test_results)
# Calculate expected defective count using Binomial formula
expected_defective <- n_tests * p_defective
# Create a data frame for comparison
df_comparison <- data.frame(
Category = c("Expected Defective", "Actual Defective"),
Count = c(expected_defective, actual_defective)
)
# Plot the comparison
ggplot(df_comparison, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity") +
labs(title = "Expected vs. Actual Defective Products", x = "Category", y = "Count") +
scale_fill_manual(values = c("Expected Defective" = "gray", "Actual Defective" = "red")) +
theme_minimal()
p_defective <- 0.1  # 10% chance of defect
# Simulate 100 product tests
n_tests <- 100
set.seed(123)  # For reproducibility
test_results <- rbinom(n_tests, size = 3, prob = p_defective)
# Count actual defective products
actual_defective <- sum(test_results)
# Calculate expected defective count using Binomial formula
expected_defective <- n_tests * p_defective
# Create a data frame for comparison
df_comparison <- data.frame(
Category = c("Expected Defective", "Actual Defective"),
Count = c(expected_defective, actual_defective)
)
# Plot the comparison
ggplot(df_comparison, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity") +
labs(title = "Expected vs. Actual Defective Products", x = "Category", y = "Count") +
scale_fill_manual(values = c("Expected Defective" = "gray", "Actual Defective" = "red")) +
theme_minimal()
test_results
p_defective <- 0.1  # 10% chance of defect
# Simulate 100 product tests
n_tests <- 100
set.seed(123)  # For reproducibility
test_results <- rbinom(n_tests, size = 1, prob = p_defective)
# Count actual defective products
actual_defective <- sum(test_results)
# Calculate expected defective count using Binomial formula
expected_defective <- n_tests * p_defective
# Create a data frame for comparison
df_comparison <- data.frame(
Category = c("Expected Defective", "Actual Defective"),
Count = c(expected_defective, actual_defective)
)
# Plot the comparison
ggplot(df_comparison, aes(x = Category, y = Count, fill = Category)) +
geom_bar(stat = "identity") +
labs(title = "Expected vs. Actual Defective Products", x = "Category", y = "Count") +
scale_fill_manual(values = c("Expected Defective" = "gray", "Actual Defective" = "red")) +
theme_minimal()
cat("\014") # Clears console
rm(list = ls()) # Clears environment
try(dev.off(dev.list()["RStudioGD"]), silent = TRUE) # Clears plots
try(p_unload(p_loaded(), character.only = TRUE), silent = TRUE) # Clears packages
options(scipen = 100) # Disables scientific notation
# Load necessary libraries
library(tidyverse)
library(ggplot2)
library(fitdistrplus)
install.packages("fitdistrplus")
library(fitdistrplus)
benefits_dam1 <- c(min = 18.7, mode = 29.2, max = 67.5)
costs_dam1 <- c(min = 16.7, mode = 19.1, max = 26.5)
benefits_dam2 <- c(min = 19, mode = 31.5, max = 41.6)
costs_dam2 <- c(min = 16.6, mode = 21.5, max = 28.1)
benefits_dam1
n_simulation = 10000
set.seed(123) # For reproducibility
total_benefits_dam1 <- simulate_values(n_simulation,
benefits_dam1["min"],
benefits_dam1["mode"],
benefits_dam1["max"])
benefits_dam1 <- c(min = 18.7, mode = 29.2, max = 67.5)
costs_dam1 <- c(min = 16.7, mode = 19.1, max = 26.5)
benefits_dam2 <- c(min = 19, mode = 31.5, max = 41.6)
costs_dam2 <- c(min = 16.6, mode = 21.5, max = 28.1)
set.seed(123) # For reproducibility
total_benefits_dam1 <- simulate_values(n_simulation,
benefits_dam1["min"],
benefits_dam1["mode"],
benefits_dam1["max"])
install.packages("traingle")
install.packages("triangle")
library(triangle)
set.seed(123) # For reproducibility
total_benefits_dam1 <- simulate_values(n_simulation,
benefits_dam1["min"],
benefits_dam1["mode"],
benefits_dam1["max"])
available.packages()[,"Package"]
available.packages()[,"Package"]
?AATtools
?AATtools
??AATtools
install.packages("remotes")  # Install remotes package if not installed
remotes::install_github("brianlukoff/triangle")
install.packages("remotes")  # Install remotes package if not installed
remotes::install_github("brianlukoff/triangle")
set.seed(123) # For reproducibility
total_benefits_dam1 <- simulate_values(n_simulation,
benefits_dam1["min"],
benefits_dam1["mode"],
benefits_dam1["max"])
install.packages("path/to/triangle.tar.gz", repos = NULL, type = "source")
library(triangle)
set.seed(123) # For reproducibility
total_benefits_dam1 <- rtriangle(n_simulation,
benefits_dam1["min"],
benefits_dam1["mode"],
benefits_dam1["max"])
total_costs_dam1 <- rtriangle(n_simulation, costs_dam1["min"],
costs_dam1["mode"],
costs_dam1["max"])
set.seed(554) # For reproducibility
total_benefits_dam1 <- rtriangle(n_simulation,
benefits_dam1["min"],
benefits_dam1["mode"],
benefits_dam1["max"])
total_costs_dam1 <- rtriangle(n_simulation, costs_dam1["min"],
costs_dam1["mode"],
costs_dam1["max"])
total_benefits_dam1
total_costs_dam1
total_costs_dam1
library(fitdistrplus)
library(MASS)
# Set seed for reproducibility
set.seed(1234)
# Define benefit categories and cost estimates for each dam
benefits <- c("Navigation", "Hydroelectric", "Wildlife", "Recreation", "Flood Control", "Development")
# Define estimated values (in millions)
# Format: list(minimum, most likely, maximum)
benefits_dam1 <- list(c(10, 15, 20), c(30, 40, 50), c(5, 10, 15), c(8, 12, 18), c(12, 20, 30), c(25, 35, 45))
benefits_dam2 <- list(c(15, 22, 30), c(25, 35, 45), c(7, 12, 17), c(10, 15, 22), c(14, 22, 35), c(20, 30, 40))
benefits
benefits_dam1
